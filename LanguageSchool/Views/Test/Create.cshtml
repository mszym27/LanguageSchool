@model LanguageSchool.Models.ViewModels.TestViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.GroupId)

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="container">
        @Html.Partial("_PartHeader", "Utwórz test dla grupy")
        <div class="row">
            <div class="bordered col-md-12">
                <div class="row">
                    <div class="col-md-4">
                        <div class="control-label col-md-2">
                            <strong>Nazwa</strong>
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-4">
                        <div class="control-label col-md-5">
                            <strong>Aktywny</strong>
                        </div>
                        <div class="col-md-4">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IsActive)
                                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <div class="control-label col-md-2">
                            <strong>Opis</strong>
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-4">
                        <div class="control-label col-md-5">
                            <strong>Liczba pytań otwartych</strong>
                        </div>
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.NumberOfOpenQuestions, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NumberOfOpenQuestions, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-4">
                        <div class="control-label col-md-5">
                            <strong>Liczba pytań zamkniętych</strong>
                        </div>
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.NumberOfClosedQuestions, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NumberOfClosedQuestions, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @Html.Partial("_PartHeader", "Wybierz tematy dla testu")
        <div class="row">
            <div class="bordered col-md-12">
                <div class="btn-group-toggle" data-toggle="buttons">
                    <table class="table table-bordered">
                        <tr>
                            <th>
                                Nazwa
                            </th>
                            <th>
                                Opis
                            </th>
                            <th>
                                Liczba zamkniętych pytań
                            </th>
                            <th>
                                Liczba otwartych pytań
                            </th>
                            <th>
                                Wybrano
                            </th>
                        </tr>

                        @for (var i = 0; i < Model.LessonSubjects.Count; i++)
                        {
                            @Html.HiddenFor(model => model.LessonSubjects[i].Id)

                            if (Model.LessonSubjects[i].NumberOfClosedQuestions != 0
                                || Model.LessonSubjects[i].NumberOfOpenQuestions != 0)
                            {
                                <tr style="background:whitesmoke;color:silver" id="@i">
                                    <td>
                                        @Model.LessonSubjects[i].Name
                                    </td>
                                    <td>
                                        @Model.LessonSubjects[i].Description
                                    </td>
                                    <td>
                                        @if (Model.LessonSubjects[i].NumberOfClosedQuestions != 0)
                                        {
                                            @Html.EditorFor(model => model.LessonSubjects[i].NumberOfClosedQuestions); @: \
                                            @Model.LessonSubjects[i].MaxNumberOfClosedQuestions;
                                        }
                                        else
                                        {
                                            @Html.EditorFor(model => model.LessonSubjects[i].NumberOfClosedQuestions, new { htmlAttributes = new { @disabled = "disabled" } })
                                        }
                                    </td>
                                    <td>
                                        @if (Model.LessonSubjects[i].NumberOfOpenQuestions != 0)
                                        {
                                            @Html.EditorFor(model => model.LessonSubjects[i].NumberOfOpenQuestions); @: \
                                            @Model.LessonSubjects[i].MaxNumberOfOpenQuestions;
                                        }
                                        else
                                        {
                                            @Html.EditorFor(model => model.LessonSubjects[i].NumberOfOpenQuestions, new { htmlAttributes = new { @disabled = "disabled" } })
                                        }
                                    </td>
                                    <td>
                                        <label class="btn btn-default btn-block" onclick="enableRow(@i)">
                                            <label style="display: block">
                                                @Html.EditorFor(model => model.LessonSubjects[i].IsMarked)
                                            </label>
                                            Wybierz
                                        </label>
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </div>
            </div>
        </div>
        <div class="row col-md-12">
            <div class="col-md-2 col-md-offset-10">
                <input type="submit" value="Utwórz" class="btn btn-block btn-default" />
            </div>
        </div>
    </div>
}

<script>
    function enableRow(rowId) {
        var row = document.getElementById(rowId);

        debugger;

        if (row.style.color == "black") {
            row.style.background = "whitesmoke";
            row.style.color = "silver";
        }
        else {
            row.style.background = "white";
            row.style.color = "black";
        }


        @*var hasAnyCorrect = "@(Model.Answers.Where(a => a.IsCorrect).Any())";
        var isEnough = "@(!(Model.Answers.Count < Model.NumberOfPossibleAnswers))";

        var isCorrect = document.getElementById("isCorrect");

        var submit = document.getElementById("submit");

        if ((isCorrect.checked || hasAnyCorrect == "True") && isEnough == "True")
            submit.disabled = false;
        else
            submit.disabled = true;*@
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
