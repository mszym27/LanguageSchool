@model LanguageSchool.Models.ViewModels.ClosedQuestionViewModel

@{
    ViewBag.Title = "Dodaj pytanie";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.LessonSubjectId)
    @Html.HiddenFor(model => model.Contents)
    @Html.HiddenFor(model => model.Points)
    @Html.HiddenFor(model => model.IsMultichoice)
    @Html.HiddenFor(model => model.NumberOfPossibleAnswers)

    var curr = Model.Answers.Count - 1;

    for (var i = 0; i < curr; i++)
    {
        @Html.HiddenFor(model => model.Answers[i].Answer)
        @Html.HiddenFor(model => model.Answers[i].IsCorrect)
    }

    <div class="container">
        <div class="row">
            <div class="bordered col-md-12">
                <div class="row">
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <strong>&nbsp;&nbsp;Treść pytania</strong>
                        </div>
                        <div class="col-md-10">
                            @Html.DisplayFor(model => model.Contents)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="control-label col-md-6">
                                <strong>Wyświetlane</strong>
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.NumberOfPossibleAnswers)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="control-label col-md-4">
                                <strong>Punkty</strong>
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.Points)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-md-offset-1">
                        <div class="form-group">
                            <div class="control-label col-md-7">
                                <strong>Wielokrotnego wyboru</strong>
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.IsMultichoice)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5 col-md-offset-7">
                <div class="col-md-6">
                    <input type="submit" name="next" value="Dodaj kolejną odpowiedź" class="btn btn-block btn-default" />
                </div>
                <div class="col-md-6">
                    <input type="submit" name="submit" id="submit" value="Utwórz pytanie" class="btn btn-block btn-primary" disabled="disabled" />
                </div>
            </div>
        </div>
        <p/>
        @if (curr >= 1)
        {
            <div class="row">
                <div class="bordered col-md-12">
                    <table class="table table-striped table-bordered">
                        <tr>
                            <th>
                                Odpowiedzi
                            </th>
                        </tr>
                        @for (var i = 0; i < curr; i++)
                    {
                        var color = "black";

                        if (@Model.Answers[i].IsCorrect)
                        {
                            color = "forestgreen";
                        }
                        <tr>
                            <td style="color:@color">
                                @Model.Answers[i].Answer
                            </td>
                        </tr>
                        }
                    </table>
                </div>
            </div>
        }

        <div class="row form-horizontal">
            <div class="bordered col-md-12">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label col-md-4">
                            <strong>Treść</strong>
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Answers[curr].Answer, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Answers[curr].Answer, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label col-md-4">
                            <strong>Poprawna</strong>
                        </div>
                        <div class="col-md-8">
                            @Html.CheckBoxFor(model => model.Answers[curr].IsCorrect, new { @id = "isCorrect", @onchange = "enableButton()" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    /*
     * 
     * jeśli pytanie jest wielokrotnego wyboru to wystarczy że liczba odpowiedzi która została dla niego wprowadzona
     * łącznie z tą która dodawana jest teraz 
     * jest większa/równa ilości tych które mają zostać wyświetlone
     * [z czego co najmniej jedna musi być poprawna]
     * w przypadku w którym jest to zwykłe pytanie zamknięte
     * to musi mieć co najmniej jedną odpowiedź poprawną
     * oraz co najmniej tyle niepoprawnych żeby możliwe było zapełnienie nimi listy 
     * czyli przy iscorrec
     * */

    <script>
        window.onload = enableButton();

        function enableButton() {
            var answersShownCount = @(Model.NumberOfPossibleAnswers);
            var isMultichoice = "@(Model.IsMultichoice)";

            var totalAnswersCount = @(Model.Answers.Count);
            var invalidAnswersCount = @(Model.Answers.Where(a => !a.IsCorrect).Count());

            var wasAnyCorrect = "@(Model.Answers.Where(a => a.IsCorrect).Any())";

            var isCorrect = document.getElementById("isCorrect");

            if(isCorrect.checked)
                invalidAnswersCount -= 1;

            var submit = document.getElementById("submit");

            submit.disabled = true;

            debugger;

            if (
                (isMultichoice == "True") &&
                (totalAnswersCount >= answersShownCount) &&
                (isCorrect.checked || wasAnyCorrect == "True")
            )
                submit.disabled = false;

            if (
                (isMultichoice == "False") &&
                (totalAnswersCount >= answersShownCount) &&
                (isCorrect.checked || wasAnyCorrect == "True") &&
                (invalidAnswersCount >= (answersShownCount - 1))
            )
                submit.disabled = false;
        }
    </script>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
